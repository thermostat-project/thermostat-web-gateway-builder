#!/bin/sh

set -eu

if [ -z "${THERMOSTAT_GATEWAY_HOME:-}" ] ; then
    echo "ERROR: empty THERMOSTAT_GATEWAY_HOME" 1>&2
    exit 1
fi

configDir="${THERMOSTAT_GATEWAY_HOME}/etc"

# escape string so that characters with special meaning in regexp are escaped
function escapeStringRegex {
    local string="${1}"

    # escape \ . * [ ^ $ characters
    printf '%s' "${string}" \
    | sed 's/\\/\\\\/g' \
    | sed 's/\./\\\./g' \
    | sed 's/\*/\\\*/g' \
    | sed 's/\[/\\\[/g' \
    | sed 's/\^/\\\^/g' \
    | sed 's/\$/\\\$/g'
}

# same as escapeStringRegex but also escape forward slash ( used for sed )
function escapeStringRegexSed {
    local string="${1}"

    escapeStringRegex "${string}" | sed 's;/;\\/;g'
}

# escape string so it can be used as key/value in properties file
# https://en.wikipedia.org/wiki/.properties
function escapeStringProperties {
    local string="${1}"

    printf '%s' "${string}" \
    | sed 's/#/\\#/g' \
    | sed 's/!/\\!/g' \
    | sed 's/=/\\=/g' \
    | sed 's/:/\\:/g'
}

# sets (or adds) single property in properties file to desired value
# ( expects .properties file to use: key = value or key=value format )
function setProperty {
    local file="${1}"
    local property="${2}"
    local value="${3}"

    if cat "${file}" | grep -q "^[[:space:]]*$( escapeStringRegex "$( escapeStringProperties "${property}" )" )[[:space:]]*=.*\$" ; then
        sed -i \
        "s/^[[:space:]]*$( escapeStringRegexSed "$( escapeStringProperties "${property}" )" )[[:space:]]*=.*\$/$( escapeStringRegexSed "$( escapeStringProperties "${property}" )=$( escapeStringProperties "${value}" )" )/g" \
        "${file}"
    else
        printf '%s\n' \
        "$( escapeStringProperties "${property}" )=$( escapeStringProperties "${value}" )" \
        >> "${file}"
    fi
}

function setServiceProperty {
    local serviceName="${1}"
    local property="${2}"
    local value="${3}"

    setProperty "${configDir}/${serviceName}/service-config.properties" \
        "${property}" "${value}"
}

# this function should prepare config files based on env. variables
# ( supplied from openshift ) prior to starting of thermostat-gateway
function prepareConfig {
    # prepare global config file
    local globalConfigFile="${configDir}/global-config.properties"
    # set wildcard address 0.0.0.0 ( bind on all interfaces )"
    setProperty "${globalConfigFile}" "IP" "0.0.0.0"
    # set port to 30000
    setProperty "${globalConfigFile}" "PORT" "30000"

    if [ -n "${MONGO_URL:-}" ] ; then
        setProperty "${globalConfigFile}" "MONGO_URL" "${MONGO_URL}"
    else
        echo "ERROR: missing MONGO_URL" 1>&2
        exit 1
    fi

    if [ -n "${MONGO_DB:-}" ] ; then
        setProperty "${globalConfigFile}" "MONGO_DB" "${MONGO_DB}"
    else
        echo "ERROR: missing MONGO_DB" 1>&2
        exit 1
    fi

    if [ -n "${MONGO_USERNAME:-}" ] ; then
        setProperty "${globalConfigFile}" "MONGO_USERNAME" "${MONGO_USERNAME}"
    else
        echo "ERROR: missing MONGO_USERNAME" 1>&2
        exit 1
    fi

    if [ -n "${MONGO_PASSWORD:-}" ] ; then
        setProperty "${globalConfigFile}" "MONGO_PASSWORD" "${MONGO_PASSWORD}"
    else
        echo "ERROR: missing MONGO_PASSWORD" 1>&2
        exit 1
    fi

    # Configure whether to use TLS, on by default
    if [ "${TLS_ENABLED:=true}" != "true" -a "${TLS_ENABLED}" != "false" ]; then
        echo "ERROR: invalid boolean value for TLS_ENABLED: ${TLS_ENABLED}" >&2
        exit 1
    fi
    setProperty "${globalConfigFile}" "WITH_TLS" "${TLS_ENABLED}"

    # Configure whether to enable the web-client endpoint, enabled by default
    if [ "${WEB_CLIENT_ENABLED:=true}" != "true" -a "${WEB_CLIENT_ENABLED}" != "false" ]; then
        echo "ERROR: invalid boolean value for WEB_CLIENT_ENABLED: ${WEB_CLIENT_ENABLED}" >&2
        exit 1
    fi
    setProperty "${globalConfigFile}" "WITH_WEB_CLIENT" "${WEB_CLIENT_ENABLED}"

    # Check if a Basic Auth config file has been supplied
    local basicAuthFile="${configDir}/basic-config.properties"
    if [ -f "${BASIC_AUTH_CONFIG:-}" ]; then
        ln -sf "${BASIC_AUTH_CONFIG}" "${basicAuthFile}"
        if [ $? -ne 0 ]; then
            echo "Failed to import basic auth config from ${BASIC_AUTH_CONFIG}" >&2
            exit 1
        fi
    fi
}

prepareConfig

# start thermostat-gateway itself
cd /
exec "${THERMOSTAT_GATEWAY_HOME}/bin/thermostat-web-gateway.sh"

